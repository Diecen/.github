name: "Perform a code test"
description: "Installing dependencies and running tests"

inputs:
   token:
     description: "Token needed to access files "
     required: true
   path-to-json:
     description: "Path to json folder with version"
     required: true
   repository-name:
     description: "Name of repository needed to create code packages"
     required: true
   repository-type:
     description: "Repository type used in bash code"
     required: true
   staging-bucket:
     description: "Staging s3 bucket name"
     required: true
   production-bucket:
     description: "Production s3 bucket name"
     required: true
   access-key-staging:
     description: "AWS staging key"
     required: true
   secret-key-staging:
     description: "AWS secret key staging"
     required: true
   access-key-production:
     description: "AWS production key"
     required: true
   secret-key-production:
     description: "AWS production secret key"
     required: true
   source-directory:
     description: "Name of repository needed to create code packages"
     required: true
   exclude-files:
     description: "List of folders/files excluded in the release"
     required: false
   included-files:
     description: "List of folders/files included in the release"
     required: false
   nested-folder:
     description: "Folder name if files are nested"
     required: false
   s3-layer-folder:
     description: "S3 layers folder"
     required: false

runs:
   using: "composite"
   steps:
      - name: Read verion number from json file
        id: version
        uses: notiz-dev/github-action-json-property@release
        with: 
           path: '${{inputs.path-to-json}}'
           prop_path: 'version'
      - name: Install NPM dependencies and create folder with files used in subsequent steps
        shell: bash
        run: | 
          if [[ "${{inputs.repository-type}}" = "typescript" ]]; then
            if [ -n "${{inputs.nested-folder}}" ]; then
                 cd ${{inputs.nested-folder}}
                 fi
            if [ -n "${{inputs.exclude-files}}" ]; then
                 npm install
                 rsync -arv ${{inputs.exclude-files}} . ./${{inputs.source-directory}}
                 fi
            if [ -n "${{inputs.included-files}}" ]; then
                 npm install
                 tsc
                 rsync -arv ${{inputs.included-files}} ./${{inputs.source-directory}}
                 fi
            exit 0
          elif [[ "${{inputs.repository-type}}" = "python" ]]; then
            if [ -n "${{inputs.nested-folder}}" ]; then
                 cd ${{inputs.nested-folder}}
                 fi
            rsync -arv ${{inputs.exclude-files}} . ./relesae
            exit 0
          elif [[ ${{inputs.repository-type}} = "layer" ]]; then
            exit 0
          else
            exit 1
          fi
        if: ${{ inputs.secret-key-staging }} == 'cdcdcd'
      - name: NIE
        if:  inputs.secret-key-staging != 'cdcdcd'

        shell: bash
        run: | 
            echo 'nie rowne'
      - name: TAK
        if: inputs.secret-key-staging == 'cdcdcd'
        shell: bash

        run: | 
            echo ' rowne'
      - name: Retrieve lambda name
        id: lambda_name
        shell: bash
        run: |
            repozitory_name=${{inputs.repository-name}}
            echo "::set-output name=LAMBDA_NAME::${repozitory_name::-7}"
      - name: Lambda code deploy to staging
        uses: appleboy/lambda-action@master
        with:
         aws_access_key_id: ${{inputs.access-key-staging}}
         aws_secret_access_key: ${{inputs.secret-key-staging}}
         aws_region: eu-west-2
         function_name: ${{steps.lambda_name.outputs.LAMBDA_NAME}}
         zip_file: ${{inputs.source-directory}}/${{inputs.repository-name}}-${{steps.version.outputs.prop}}.zip
